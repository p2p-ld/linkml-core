# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import datetime
import typing

class AltDescription:
    @property
    def alt_description_source(self) -> builtins.str: ...
    @property
    def alt_description_text(self) -> builtins.str: ...
    @alt_description_source.setter
    def alt_description_source(self, value: builtins.str) -> None: ...
    @alt_description_text.setter
    def alt_description_text(self, value: builtins.str) -> None: ...
    def __new__(cls, alt_description_source:builtins.str, alt_description_text:builtins.str) -> AltDescription: ...

class Annotatable:
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    def __new__(cls, annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]]) -> Annotatable: ...

class Annotation:
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def extension_tag(self) -> builtins.str: ...
    @property
    def extension_value(self) -> typing.Any: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @extension_tag.setter
    def extension_tag(self, value: builtins.str) -> None: ...
    @extension_value.setter
    def extension_value(self, value: typing.Any) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    def __new__(cls, annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], extension_tag:builtins.str, extension_value:typing.Any, extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]]) -> Annotation: ...

class AnonymousClassExpression:
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def slot_conditions(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @slot_conditions.setter
    def slot_conditions(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, is_a:typing.Optional[builtins.str], any_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], none_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], all_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], slot_conditions:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> AnonymousClassExpression: ...

class AnonymousEnumExpression:
    @property
    def code_set(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_tag(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_version(self) -> typing.Optional[builtins.str]: ...
    @property
    def pv_formula(self) -> typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]: ...
    @property
    def permissible_values(self) -> typing.Optional[builtins.dict[builtins.str, PermissibleValue]]: ...
    @property
    def include(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def minus(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def inherits(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def reachable_from(self) -> typing.Optional[ReachabilityQuery]: ...
    @property
    def matches(self) -> typing.Optional[MatchQuery]: ...
    @property
    def concepts(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @code_set.setter
    def code_set(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_tag.setter
    def code_set_tag(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_version.setter
    def code_set_version(self, value: typing.Optional[builtins.str]) -> None: ...
    @pv_formula.setter
    def pv_formula(self, value: typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]) -> None: ...
    @permissible_values.setter
    def permissible_values(self, value: typing.Optional[builtins.dict[builtins.str, PermissibleValue]]) -> None: ...
    @include.setter
    def include(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @minus.setter
    def minus(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @inherits.setter
    def inherits(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @reachable_from.setter
    def reachable_from(self, value: typing.Optional[ReachabilityQuery]) -> None: ...
    @matches.setter
    def matches(self, value: typing.Optional[MatchQuery]) -> None: ...
    @concepts.setter
    def concepts(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, code_set:typing.Optional[builtins.str], code_set_tag:typing.Optional[builtins.str], code_set_version:typing.Optional[builtins.str], pv_formula:typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']], permissible_values:typing.Optional[typing.Mapping[builtins.str, PermissibleValue]], include:typing.Optional[typing.Sequence[AnonymousEnumExpression]], minus:typing.Optional[typing.Sequence[AnonymousEnumExpression]], inherits:typing.Optional[typing.Sequence[builtins.str]], reachable_from:typing.Optional[ReachabilityQuery], matches:typing.Optional[MatchQuery], concepts:typing.Optional[typing.Sequence[builtins.str]]) -> AnonymousEnumExpression: ...

class AnonymousExpression:
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> AnonymousExpression: ...

class AnonymousSlotExpression:
    @property
    def range(self) -> typing.Optional[builtins.str]: ...
    @property
    def range_expression(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def enum_range(self) -> typing.Optional[AnonymousEnumExpression | EnumDefinition]: ...
    @property
    def bindings(self) -> typing.Optional[builtins.list[EnumBinding]]: ...
    @property
    def required(self) -> typing.Optional[builtins.bool]: ...
    @property
    def recommended(self) -> typing.Optional[builtins.bool]: ...
    @property
    def multivalued(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined_as_list(self) -> typing.Optional[builtins.bool]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def value_presence(self) -> typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def equals_expression(self) -> typing.Optional[builtins.str]: ...
    @property
    def exact_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def maximum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def has_member(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def all_members(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @range.setter
    def range(self, value: typing.Optional[builtins.str]) -> None: ...
    @range_expression.setter
    def range_expression(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @enum_range.setter
    def enum_range(self, value: typing.Optional[AnonymousEnumExpression | EnumDefinition]) -> None: ...
    @bindings.setter
    def bindings(self, value: typing.Optional[builtins.list[EnumBinding]]) -> None: ...
    @required.setter
    def required(self, value: typing.Optional[builtins.bool]) -> None: ...
    @recommended.setter
    def recommended(self, value: typing.Optional[builtins.bool]) -> None: ...
    @multivalued.setter
    def multivalued(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined.setter
    def inlined(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined_as_list.setter
    def inlined_as_list(self, value: typing.Optional[builtins.bool]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @value_presence.setter
    def value_presence(self, value: typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @equals_expression.setter
    def equals_expression(self, value: typing.Optional[builtins.str]) -> None: ...
    @exact_cardinality.setter
    def exact_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_cardinality.setter
    def minimum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @maximum_cardinality.setter
    def maximum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @has_member.setter
    def has_member(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @all_members.setter
    def all_members(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, range:typing.Optional[builtins.str], range_expression:typing.Optional[AnonymousClassExpression], enum_range:typing.Optional[AnonymousEnumExpression | EnumDefinition], bindings:typing.Optional[typing.Sequence[EnumBinding]], required:typing.Optional[builtins.bool], recommended:typing.Optional[builtins.bool], multivalued:typing.Optional[builtins.bool], inlined:typing.Optional[builtins.bool], inlined_as_list:typing.Optional[builtins.bool], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], value_presence:typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], equals_expression:typing.Optional[builtins.str], exact_cardinality:typing.Optional[builtins.int], minimum_cardinality:typing.Optional[builtins.int], maximum_cardinality:typing.Optional[builtins.int], has_member:typing.Optional[AnonymousSlotExpression], all_members:typing.Optional[AnonymousSlotExpression], none_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], any_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], all_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> AnonymousSlotExpression: ...

class AnonymousTypeExpression:
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    def __new__(cls, pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], none_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], any_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], all_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]]) -> AnonymousTypeExpression: ...

class ArrayExpression:
    @property
    def exact_number_dimensions(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_number_dimensions(self) -> typing.Optional[builtins.int]: ...
    @property
    def maximum_number_dimensions(self) -> typing.Optional[typing.Any | builtins.int | builtins.bool]: ...
    @property
    def dimensions(self) -> typing.Optional[builtins.list[DimensionExpression]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @exact_number_dimensions.setter
    def exact_number_dimensions(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_number_dimensions.setter
    def minimum_number_dimensions(self, value: typing.Optional[builtins.int]) -> None: ...
    @maximum_number_dimensions.setter
    def maximum_number_dimensions(self, value: typing.Optional[typing.Any | builtins.int | builtins.bool]) -> None: ...
    @dimensions.setter
    def dimensions(self, value: typing.Optional[builtins.list[DimensionExpression]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, exact_number_dimensions:typing.Optional[builtins.int], minimum_number_dimensions:typing.Optional[builtins.int], maximum_number_dimensions:typing.Optional[typing.Any | builtins.int | builtins.bool], dimensions:typing.Optional[typing.Sequence[DimensionExpression]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> ArrayExpression: ...

class ClassDefinition:
    @property
    def slots(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def slot_usage(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @property
    def attributes(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @property
    def class_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def subclass_of(self) -> typing.Optional[builtins.str]: ...
    @property
    def union_of(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def defining_slots(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def tree_root(self) -> typing.Optional[builtins.bool]: ...
    @property
    def unique_keys(self) -> typing.Optional[builtins.dict[builtins.str, UniqueKey]]: ...
    @property
    def rules(self) -> typing.Optional[builtins.list[ClassRule]]: ...
    @property
    def classification_rules(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def slot_names_unique(self) -> typing.Optional[builtins.bool]: ...
    @property
    def represents_relationship(self) -> typing.Optional[builtins.bool]: ...
    @property
    def disjoint_with(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def children_are_mutually_disjoint(self) -> typing.Optional[builtins.bool]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def slot_conditions(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def abstract_(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixin(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixins(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def apply_to(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def values_from(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def string_serialization(self) -> typing.Optional[builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @slots.setter
    def slots(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @slot_usage.setter
    def slot_usage(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    @attributes.setter
    def attributes(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    @class_uri.setter
    def class_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @subclass_of.setter
    def subclass_of(self, value: typing.Optional[builtins.str]) -> None: ...
    @union_of.setter
    def union_of(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @defining_slots.setter
    def defining_slots(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @tree_root.setter
    def tree_root(self, value: typing.Optional[builtins.bool]) -> None: ...
    @unique_keys.setter
    def unique_keys(self, value: typing.Optional[builtins.dict[builtins.str, UniqueKey]]) -> None: ...
    @rules.setter
    def rules(self, value: typing.Optional[builtins.list[ClassRule]]) -> None: ...
    @classification_rules.setter
    def classification_rules(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @slot_names_unique.setter
    def slot_names_unique(self, value: typing.Optional[builtins.bool]) -> None: ...
    @represents_relationship.setter
    def represents_relationship(self, value: typing.Optional[builtins.bool]) -> None: ...
    @disjoint_with.setter
    def disjoint_with(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @children_are_mutually_disjoint.setter
    def children_are_mutually_disjoint(self, value: typing.Optional[builtins.bool]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @slot_conditions.setter
    def slot_conditions(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @abstract_.setter
    def abstract_(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixin.setter
    def mixin(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixins.setter
    def mixins(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @apply_to.setter
    def apply_to(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @values_from.setter
    def values_from(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @string_serialization.setter
    def string_serialization(self, value: typing.Optional[builtins.str]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, slots:typing.Optional[typing.Sequence[builtins.str]], slot_usage:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]], attributes:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]], class_uri:typing.Optional[builtins.str], subclass_of:typing.Optional[builtins.str], union_of:typing.Optional[typing.Sequence[builtins.str]], defining_slots:typing.Optional[typing.Sequence[builtins.str]], tree_root:typing.Optional[builtins.bool], unique_keys:typing.Optional[typing.Mapping[builtins.str, UniqueKey]], rules:typing.Optional[typing.Sequence[ClassRule]], classification_rules:typing.Optional[typing.Sequence[AnonymousClassExpression]], slot_names_unique:typing.Optional[builtins.bool], represents_relationship:typing.Optional[builtins.bool], disjoint_with:typing.Optional[typing.Sequence[builtins.str]], children_are_mutually_disjoint:typing.Optional[builtins.bool], any_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], none_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], all_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], slot_conditions:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]], is_a:typing.Optional[builtins.str], abstract_:typing.Optional[builtins.bool], mixin:typing.Optional[builtins.bool], mixins:typing.Optional[typing.Sequence[builtins.str]], apply_to:typing.Optional[typing.Sequence[builtins.str]], values_from:typing.Optional[typing.Sequence[builtins.str]], string_serialization:typing.Optional[builtins.str], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> ClassDefinition: ...

class ClassExpression:
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousClassExpression]]: ...
    @property
    def slot_conditions(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousClassExpression]]) -> None: ...
    @slot_conditions.setter
    def slot_conditions(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    def __new__(cls, any_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], none_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], all_of:typing.Optional[typing.Sequence[AnonymousClassExpression]], slot_conditions:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]]) -> ClassExpression: ...

class ClassLevelRule:
    ...

class ClassRule:
    @property
    def preconditions(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def postconditions(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def elseconditions(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def bidirectional(self) -> typing.Optional[builtins.bool]: ...
    @property
    def open_world(self) -> typing.Optional[builtins.bool]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def deactivated(self) -> typing.Optional[builtins.bool]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @preconditions.setter
    def preconditions(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @postconditions.setter
    def postconditions(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @elseconditions.setter
    def elseconditions(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @bidirectional.setter
    def bidirectional(self, value: typing.Optional[builtins.bool]) -> None: ...
    @open_world.setter
    def open_world(self, value: typing.Optional[builtins.bool]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @deactivated.setter
    def deactivated(self, value: typing.Optional[builtins.bool]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, preconditions:typing.Optional[AnonymousClassExpression], postconditions:typing.Optional[AnonymousClassExpression], elseconditions:typing.Optional[AnonymousClassExpression], bidirectional:typing.Optional[builtins.bool], open_world:typing.Optional[builtins.bool], rank:typing.Optional[builtins.int], deactivated:typing.Optional[builtins.bool], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> ClassRule: ...

class ClassView:
    @property
    def name(self) -> builtins.str: ...
    @property
    def definition(self) -> ClassDefinition: ...
    def slots(self) -> builtins.list[SlotView]: ...
    def parent_class(self) -> typing.Optional[ClassView]: ...
    def identifier_slot(self) -> typing.Optional[SlotView]: ...
    def key_or_identifier_slot(self) -> typing.Optional[SlotView]: ...
    def get_descendants(self, recurse:builtins.bool, include_mixins:builtins.bool) -> builtins.list[ClassView]: ...
    def schema_id(self) -> builtins.str: ...
    def canonical_uri(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class CommonMetadata:
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> CommonMetadata: ...

class Definition:
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def abstract_(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixin(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixins(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def apply_to(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def values_from(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def string_serialization(self) -> typing.Optional[builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @abstract_.setter
    def abstract_(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixin.setter
    def mixin(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixins.setter
    def mixins(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @apply_to.setter
    def apply_to(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @values_from.setter
    def values_from(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @string_serialization.setter
    def string_serialization(self, value: typing.Optional[builtins.str]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, is_a:typing.Optional[builtins.str], abstract_:typing.Optional[builtins.bool], mixin:typing.Optional[builtins.bool], mixins:typing.Optional[typing.Sequence[builtins.str]], apply_to:typing.Optional[typing.Sequence[builtins.str]], values_from:typing.Optional[typing.Sequence[builtins.str]], string_serialization:typing.Optional[builtins.str], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> Definition: ...

class DimensionExpression:
    @property
    def alias(self) -> typing.Optional[builtins.str]: ...
    @property
    def maximum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def exact_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @alias.setter
    def alias(self, value: typing.Optional[builtins.str]) -> None: ...
    @maximum_cardinality.setter
    def maximum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_cardinality.setter
    def minimum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @exact_cardinality.setter
    def exact_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, alias:typing.Optional[builtins.str], maximum_cardinality:typing.Optional[builtins.int], minimum_cardinality:typing.Optional[builtins.int], exact_cardinality:typing.Optional[builtins.int], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> DimensionExpression: ...

class Element:
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> Element: ...

class EnumBinding:
    @property
    def range(self) -> typing.Optional[builtins.str]: ...
    @property
    def obligation_level(self) -> typing.Optional[typing.Literal['REQUIRED', 'RECOMMENDED', 'OPTIONAL', 'EXAMPLE', 'DISCOURAGED']]: ...
    @property
    def binds_value_of(self) -> typing.Optional[builtins.str]: ...
    @property
    def pv_formula(self) -> typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @range.setter
    def range(self, value: typing.Optional[builtins.str]) -> None: ...
    @obligation_level.setter
    def obligation_level(self, value: typing.Optional[typing.Literal['REQUIRED', 'RECOMMENDED', 'OPTIONAL', 'EXAMPLE', 'DISCOURAGED']]) -> None: ...
    @binds_value_of.setter
    def binds_value_of(self, value: typing.Optional[builtins.str]) -> None: ...
    @pv_formula.setter
    def pv_formula(self, value: typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, range:typing.Optional[builtins.str], obligation_level:typing.Optional[typing.Literal['REQUIRED', 'RECOMMENDED', 'OPTIONAL', 'EXAMPLE', 'DISCOURAGED']], binds_value_of:typing.Optional[builtins.str], pv_formula:typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> EnumBinding: ...

class EnumDefinition:
    @property
    def enum_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_tag(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_version(self) -> typing.Optional[builtins.str]: ...
    @property
    def pv_formula(self) -> typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]: ...
    @property
    def permissible_values(self) -> typing.Optional[builtins.dict[builtins.str, PermissibleValue]]: ...
    @property
    def include(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def minus(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def inherits(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def reachable_from(self) -> typing.Optional[ReachabilityQuery]: ...
    @property
    def matches(self) -> typing.Optional[MatchQuery]: ...
    @property
    def concepts(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def abstract_(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixin(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixins(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def apply_to(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def values_from(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def string_serialization(self) -> typing.Optional[builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @enum_uri.setter
    def enum_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set.setter
    def code_set(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_tag.setter
    def code_set_tag(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_version.setter
    def code_set_version(self, value: typing.Optional[builtins.str]) -> None: ...
    @pv_formula.setter
    def pv_formula(self, value: typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]) -> None: ...
    @permissible_values.setter
    def permissible_values(self, value: typing.Optional[builtins.dict[builtins.str, PermissibleValue]]) -> None: ...
    @include.setter
    def include(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @minus.setter
    def minus(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @inherits.setter
    def inherits(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @reachable_from.setter
    def reachable_from(self, value: typing.Optional[ReachabilityQuery]) -> None: ...
    @matches.setter
    def matches(self, value: typing.Optional[MatchQuery]) -> None: ...
    @concepts.setter
    def concepts(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @abstract_.setter
    def abstract_(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixin.setter
    def mixin(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixins.setter
    def mixins(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @apply_to.setter
    def apply_to(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @values_from.setter
    def values_from(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @string_serialization.setter
    def string_serialization(self, value: typing.Optional[builtins.str]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, enum_uri:typing.Optional[builtins.str], code_set:typing.Optional[builtins.str], code_set_tag:typing.Optional[builtins.str], code_set_version:typing.Optional[builtins.str], pv_formula:typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']], permissible_values:typing.Optional[typing.Mapping[builtins.str, PermissibleValue]], include:typing.Optional[typing.Sequence[AnonymousEnumExpression]], minus:typing.Optional[typing.Sequence[AnonymousEnumExpression]], inherits:typing.Optional[typing.Sequence[builtins.str]], reachable_from:typing.Optional[ReachabilityQuery], matches:typing.Optional[MatchQuery], concepts:typing.Optional[typing.Sequence[builtins.str]], is_a:typing.Optional[builtins.str], abstract_:typing.Optional[builtins.bool], mixin:typing.Optional[builtins.bool], mixins:typing.Optional[typing.Sequence[builtins.str]], apply_to:typing.Optional[typing.Sequence[builtins.str]], values_from:typing.Optional[typing.Sequence[builtins.str]], string_serialization:typing.Optional[builtins.str], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> EnumDefinition: ...

class EnumExpression:
    @property
    def code_set(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_tag(self) -> typing.Optional[builtins.str]: ...
    @property
    def code_set_version(self) -> typing.Optional[builtins.str]: ...
    @property
    def pv_formula(self) -> typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]: ...
    @property
    def permissible_values(self) -> typing.Optional[builtins.dict[builtins.str, PermissibleValue]]: ...
    @property
    def include(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def minus(self) -> typing.Optional[builtins.list[AnonymousEnumExpression]]: ...
    @property
    def inherits(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def reachable_from(self) -> typing.Optional[ReachabilityQuery]: ...
    @property
    def matches(self) -> typing.Optional[MatchQuery]: ...
    @property
    def concepts(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @code_set.setter
    def code_set(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_tag.setter
    def code_set_tag(self, value: typing.Optional[builtins.str]) -> None: ...
    @code_set_version.setter
    def code_set_version(self, value: typing.Optional[builtins.str]) -> None: ...
    @pv_formula.setter
    def pv_formula(self, value: typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']]) -> None: ...
    @permissible_values.setter
    def permissible_values(self, value: typing.Optional[builtins.dict[builtins.str, PermissibleValue]]) -> None: ...
    @include.setter
    def include(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @minus.setter
    def minus(self, value: typing.Optional[builtins.list[AnonymousEnumExpression]]) -> None: ...
    @inherits.setter
    def inherits(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @reachable_from.setter
    def reachable_from(self, value: typing.Optional[ReachabilityQuery]) -> None: ...
    @matches.setter
    def matches(self, value: typing.Optional[MatchQuery]) -> None: ...
    @concepts.setter
    def concepts(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, code_set:typing.Optional[builtins.str], code_set_tag:typing.Optional[builtins.str], code_set_version:typing.Optional[builtins.str], pv_formula:typing.Optional[typing.Literal['CODE', 'CURIE', 'URI', 'FHIRCODING', 'LABEL']], permissible_values:typing.Optional[typing.Mapping[builtins.str, PermissibleValue]], include:typing.Optional[typing.Sequence[AnonymousEnumExpression]], minus:typing.Optional[typing.Sequence[AnonymousEnumExpression]], inherits:typing.Optional[typing.Sequence[builtins.str]], reachable_from:typing.Optional[ReachabilityQuery], matches:typing.Optional[MatchQuery], concepts:typing.Optional[typing.Sequence[builtins.str]]) -> EnumExpression: ...

class EnumView:
    @property
    def name(self) -> builtins.str: ...
    @property
    def definition(self) -> EnumDefinition: ...
    def permissible_value_keys(self) -> builtins.list[builtins.str]: ...
    def schema_id(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Example:
    @property
    def value(self) -> typing.Optional[builtins.str]: ...
    @property
    def value_description(self) -> typing.Optional[builtins.str]: ...
    @property
    def value_object(self) -> typing.Optional[typing.Any]: ...
    @value.setter
    def value(self, value: typing.Optional[builtins.str]) -> None: ...
    @value_description.setter
    def value_description(self, value: typing.Optional[builtins.str]) -> None: ...
    @value_object.setter
    def value_object(self, value: typing.Optional[typing.Any]) -> None: ...
    def __new__(cls, value:typing.Optional[builtins.str], value_description:typing.Optional[builtins.str], value_object:typing.Optional[typing.Any]) -> Example: ...

class Expression:
    ...

class Extensible:
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    def __new__(cls, extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]]) -> Extensible: ...

class Extension:
    @property
    def extension_tag(self) -> builtins.str: ...
    @property
    def extension_value(self) -> typing.Any: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @extension_tag.setter
    def extension_tag(self, value: builtins.str) -> None: ...
    @extension_value.setter
    def extension_value(self, value: typing.Any) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    def __new__(cls, extension_tag:builtins.str, extension_value:typing.Any, extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]]) -> Extension: ...

class ImportExpression:
    @property
    def import_from(self) -> builtins.str: ...
    @property
    def import_as(self) -> typing.Optional[builtins.str]: ...
    @property
    def import_map(self) -> typing.Optional[builtins.dict[builtins.str, Setting]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @import_from.setter
    def import_from(self, value: builtins.str) -> None: ...
    @import_as.setter
    def import_as(self, value: typing.Optional[builtins.str]) -> None: ...
    @import_map.setter
    def import_map(self, value: typing.Optional[builtins.dict[builtins.str, Setting]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, import_from:builtins.str, import_as:typing.Optional[builtins.str], import_map:typing.Optional[typing.Mapping[builtins.str, Setting]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> ImportExpression: ...

class LinkMLInstance:
    @property
    def slot_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def kind(self) -> builtins.str: ...
    @property
    def node_id(self) -> builtins.int: ...
    @property
    def slot_definition(self) -> typing.Optional[SlotDefinition]: ...
    @property
    def class_definition(self) -> typing.Optional[ClassDefinition]: ...
    @property
    def class_name(self) -> typing.Optional[builtins.str]: ...
    def equals(self, other:LinkMLInstance, treat_missing_as_null:builtins.bool=False) -> builtins.bool:
        r"""
        Semantic equality per LinkML Instances spec.
        Compares this value with another `LinkMLInstance`.
        """
    def __len__(self) -> builtins.int: ...
    def __getitem__(self, key:typing.Any) -> LinkMLInstance: ...
    def navigate(self, path:typing.Any) -> typing.Optional[LinkMLInstance]:
        r"""
        Navigate by a path of strings (map keys or list indices).
        Returns a new LinkMLInstance if found, otherwise None.
        """
    def keys(self) -> builtins.list[builtins.str]: ...
    def values(self) -> builtins.list[LinkMLInstance]: ...
    def as_python(self) -> typing.Any: ...
    def as_turtle(self, skolem:typing.Optional[builtins.bool]) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class LocalName:
    @property
    def local_name_source(self) -> builtins.str: ...
    @property
    def local_name_value(self) -> builtins.str: ...
    @local_name_source.setter
    def local_name_source(self, value: builtins.str) -> None: ...
    @local_name_value.setter
    def local_name_value(self, value: builtins.str) -> None: ...
    def __new__(cls, local_name_source:builtins.str, local_name_value:builtins.str) -> LocalName: ...

class MatchQuery:
    @property
    def identifier_pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def source_ontology(self) -> typing.Optional[builtins.str]: ...
    @identifier_pattern.setter
    def identifier_pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @source_ontology.setter
    def source_ontology(self, value: typing.Optional[builtins.str]) -> None: ...
    def __new__(cls, identifier_pattern:typing.Optional[builtins.str], source_ontology:typing.Optional[builtins.str]) -> MatchQuery: ...

class PatchResult:
    @property
    def value(self) -> LinkMLInstance: ...
    @property
    def trace(self) -> PatchTrace: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class PatchTrace:
    @property
    def added(self) -> builtins.list[builtins.int]: ...
    @property
    def deleted(self) -> builtins.list[builtins.int]: ...
    @property
    def updated(self) -> builtins.list[builtins.int]: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class PathExpression:
    @property
    def followed_by(self) -> typing.Optional[PathExpression]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[PathExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[PathExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[PathExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[PathExpression]]: ...
    @property
    def reversed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def traverse(self) -> typing.Optional[builtins.str]: ...
    @property
    def range_expression(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @followed_by.setter
    def followed_by(self, value: typing.Optional[PathExpression]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[PathExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[PathExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[PathExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[PathExpression]]) -> None: ...
    @reversed.setter
    def reversed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @traverse.setter
    def traverse(self, value: typing.Optional[builtins.str]) -> None: ...
    @range_expression.setter
    def range_expression(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, followed_by:typing.Optional[PathExpression], none_of:typing.Optional[typing.Sequence[PathExpression]], any_of:typing.Optional[typing.Sequence[PathExpression]], all_of:typing.Optional[typing.Sequence[PathExpression]], exactly_one_of:typing.Optional[typing.Sequence[PathExpression]], reversed:typing.Optional[builtins.bool], traverse:typing.Optional[builtins.str], range_expression:typing.Optional[AnonymousClassExpression], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> PathExpression: ...

class PatternExpression:
    @property
    def syntax(self) -> typing.Optional[builtins.str]: ...
    @property
    def interpolated(self) -> typing.Optional[builtins.bool]: ...
    @property
    def partial_match(self) -> typing.Optional[builtins.bool]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @syntax.setter
    def syntax(self, value: typing.Optional[builtins.str]) -> None: ...
    @interpolated.setter
    def interpolated(self, value: typing.Optional[builtins.bool]) -> None: ...
    @partial_match.setter
    def partial_match(self, value: typing.Optional[builtins.bool]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, syntax:typing.Optional[builtins.str], interpolated:typing.Optional[builtins.bool], partial_match:typing.Optional[builtins.bool], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> PatternExpression: ...

class PermissibleValue:
    @property
    def text(self) -> builtins.str: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def meaning(self) -> typing.Optional[builtins.str]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def mixins(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @text.setter
    def text(self, value: builtins.str) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @meaning.setter
    def meaning(self, value: typing.Optional[builtins.str]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @mixins.setter
    def mixins(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, text:builtins.str, description:typing.Optional[builtins.str], meaning:typing.Optional[builtins.str], unit:typing.Optional[UnitOfMeasure], instantiates:typing.Optional[typing.Sequence[builtins.str]], implements:typing.Optional[typing.Sequence[builtins.str]], is_a:typing.Optional[builtins.str], mixins:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> PermissibleValue: ...

class Prefix:
    @property
    def prefix_prefix(self) -> builtins.str: ...
    @property
    def prefix_reference(self) -> builtins.str: ...
    @prefix_prefix.setter
    def prefix_prefix(self, value: builtins.str) -> None: ...
    @prefix_reference.setter
    def prefix_reference(self, value: builtins.str) -> None: ...
    def __new__(cls, prefix_prefix:builtins.str, prefix_reference:builtins.str) -> Prefix: ...

class ReachabilityQuery:
    @property
    def source_ontology(self) -> typing.Optional[builtins.str]: ...
    @property
    def source_nodes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def relationship_types(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def is_direct(self) -> typing.Optional[builtins.bool]: ...
    @property
    def include_self(self) -> typing.Optional[builtins.bool]: ...
    @property
    def traverse_up(self) -> typing.Optional[builtins.bool]: ...
    @source_ontology.setter
    def source_ontology(self, value: typing.Optional[builtins.str]) -> None: ...
    @source_nodes.setter
    def source_nodes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @relationship_types.setter
    def relationship_types(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @is_direct.setter
    def is_direct(self, value: typing.Optional[builtins.bool]) -> None: ...
    @include_self.setter
    def include_self(self, value: typing.Optional[builtins.bool]) -> None: ...
    @traverse_up.setter
    def traverse_up(self, value: typing.Optional[builtins.bool]) -> None: ...
    def __new__(cls, source_ontology:typing.Optional[builtins.str], source_nodes:typing.Optional[typing.Sequence[builtins.str]], relationship_types:typing.Optional[typing.Sequence[builtins.str]], is_direct:typing.Optional[builtins.bool], include_self:typing.Optional[builtins.bool], traverse_up:typing.Optional[builtins.bool]) -> ReachabilityQuery: ...

class SchemaDefinition:
    @property
    def id(self) -> builtins.str: ...
    @property
    def version(self) -> typing.Optional[builtins.str]: ...
    @property
    def imports(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def license(self) -> typing.Optional[builtins.str]: ...
    @property
    def prefixes(self) -> typing.Optional[builtins.dict[builtins.str, Prefix]]: ...
    @property
    def emit_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def default_curi_maps(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def default_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def default_range(self) -> typing.Optional[builtins.str]: ...
    @property
    def subsets(self) -> typing.Optional[builtins.dict[builtins.str, SubsetDefinition]]: ...
    @property
    def types(self) -> typing.Optional[builtins.dict[builtins.str, TypeDefinition]]: ...
    @property
    def enums(self) -> typing.Optional[builtins.dict[builtins.str, EnumDefinition]]: ...
    @property
    def slot_definitions(self) -> typing.Optional[builtins.dict[builtins.str, SlotDefinition]]: ...
    @property
    def classes(self) -> typing.Optional[builtins.dict[builtins.str, ClassDefinition]]: ...
    @property
    def metamodel_version(self) -> typing.Optional[builtins.str]: ...
    @property
    def source_file(self) -> typing.Optional[builtins.str]: ...
    @property
    def source_file_date(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def source_file_size(self) -> typing.Optional[builtins.int]: ...
    @property
    def generation_date(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def slot_names_unique(self) -> typing.Optional[builtins.bool]: ...
    @property
    def settings(self) -> typing.Optional[builtins.dict[builtins.str, Setting]]: ...
    @property
    def bindings(self) -> typing.Optional[builtins.list[EnumBinding]]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @id.setter
    def id(self, value: builtins.str) -> None: ...
    @version.setter
    def version(self, value: typing.Optional[builtins.str]) -> None: ...
    @imports.setter
    def imports(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @license.setter
    def license(self, value: typing.Optional[builtins.str]) -> None: ...
    @prefixes.setter
    def prefixes(self, value: typing.Optional[builtins.dict[builtins.str, Prefix]]) -> None: ...
    @emit_prefixes.setter
    def emit_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @default_curi_maps.setter
    def default_curi_maps(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @default_prefix.setter
    def default_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @default_range.setter
    def default_range(self, value: typing.Optional[builtins.str]) -> None: ...
    @subsets.setter
    def subsets(self, value: typing.Optional[builtins.dict[builtins.str, SubsetDefinition]]) -> None: ...
    @types.setter
    def types(self, value: typing.Optional[builtins.dict[builtins.str, TypeDefinition]]) -> None: ...
    @enums.setter
    def enums(self, value: typing.Optional[builtins.dict[builtins.str, EnumDefinition]]) -> None: ...
    @slot_definitions.setter
    def slot_definitions(self, value: typing.Optional[builtins.dict[builtins.str, SlotDefinition]]) -> None: ...
    @classes.setter
    def classes(self, value: typing.Optional[builtins.dict[builtins.str, ClassDefinition]]) -> None: ...
    @metamodel_version.setter
    def metamodel_version(self, value: typing.Optional[builtins.str]) -> None: ...
    @source_file.setter
    def source_file(self, value: typing.Optional[builtins.str]) -> None: ...
    @source_file_date.setter
    def source_file_date(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @source_file_size.setter
    def source_file_size(self, value: typing.Optional[builtins.int]) -> None: ...
    @generation_date.setter
    def generation_date(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @slot_names_unique.setter
    def slot_names_unique(self, value: typing.Optional[builtins.bool]) -> None: ...
    @settings.setter
    def settings(self, value: typing.Optional[builtins.dict[builtins.str, Setting]]) -> None: ...
    @bindings.setter
    def bindings(self, value: typing.Optional[builtins.list[EnumBinding]]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, id:builtins.str, version:typing.Optional[builtins.str], imports:typing.Optional[typing.Sequence[builtins.str]], license:typing.Optional[builtins.str], prefixes:typing.Optional[typing.Mapping[builtins.str, Prefix]], emit_prefixes:typing.Optional[typing.Sequence[builtins.str]], default_curi_maps:typing.Optional[typing.Sequence[builtins.str]], default_prefix:typing.Optional[builtins.str], default_range:typing.Optional[builtins.str], subsets:typing.Optional[typing.Mapping[builtins.str, SubsetDefinition]], types:typing.Optional[typing.Mapping[builtins.str, TypeDefinition]], enums:typing.Optional[typing.Mapping[builtins.str, EnumDefinition]], slot_definitions:typing.Optional[typing.Mapping[builtins.str, SlotDefinition]], classes:typing.Optional[typing.Mapping[builtins.str, ClassDefinition]], metamodel_version:typing.Optional[builtins.str], source_file:typing.Optional[builtins.str], source_file_date:typing.Optional[datetime.datetime], source_file_size:typing.Optional[builtins.int], generation_date:typing.Optional[datetime.datetime], slot_names_unique:typing.Optional[builtins.bool], settings:typing.Optional[typing.Mapping[builtins.str, Setting]], bindings:typing.Optional[typing.Sequence[EnumBinding]], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> SchemaDefinition: ...

class SchemaView:
    def __new__(cls, source:typing.Optional[typing.Any]=None) -> SchemaView: ...
    def _get_resolved_schema_imports(self) -> builtins.dict[tuple[builtins.str, builtins.str], builtins.str]: ...
    def get_default_prefix_for_schema(self, schema_id:builtins.str, expand:builtins.bool) -> typing.Optional[builtins.str]: ...
    def add_schema_from_path(self, path:builtins.str) -> builtins.bool: ...
    def add_schema_str(self, data:builtins.str) -> builtins.bool: ...
    def get_unresolved_schemas(self) -> builtins.list[builtins.str]: ...
    def get_unresolved_schema_refs(self) -> builtins.list[tuple[builtins.str, builtins.str]]: ...
    def get_resolution_uri_of_schema(self, id:builtins.str) -> typing.Optional[builtins.str]: ...
    def add_schema_str_with_import_ref(self, data:builtins.str, schema_id:builtins.str, uri:builtins.str) -> None: ...
    def get_schema(self, uri:builtins.str) -> typing.Optional[SchemaDefinition]: ...
    def get_class_view(self, id:builtins.str) -> typing.Optional[ClassView]: ...
    def get_slot_view(self, id:builtins.str) -> typing.Optional[SlotView]: ...
    def get_enum_view(self, id:builtins.str) -> typing.Optional[EnumView]: ...
    def schema_ids(self) -> builtins.list[builtins.str]: ...
    def get_class_ids(self) -> builtins.list[builtins.str]: ...
    def get_slot_ids(self) -> builtins.list[builtins.str]: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class Setting:
    @property
    def setting_key(self) -> builtins.str: ...
    @property
    def setting_value(self) -> builtins.str: ...
    @setting_key.setter
    def setting_key(self, value: builtins.str) -> None: ...
    @setting_value.setter
    def setting_value(self, value: builtins.str) -> None: ...
    def __new__(cls, setting_key:builtins.str, setting_value:builtins.str) -> Setting: ...

class SlotDefinition:
    @property
    def singular_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def domain(self) -> typing.Optional[builtins.str]: ...
    @property
    def slot_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def array(self) -> typing.Optional[ArrayExpression]: ...
    @property
    def inherited(self) -> typing.Optional[builtins.bool]: ...
    @property
    def readonly(self) -> typing.Optional[builtins.str]: ...
    @property
    def ifabsent(self) -> typing.Optional[builtins.str]: ...
    @property
    def list_elements_unique(self) -> typing.Optional[builtins.bool]: ...
    @property
    def list_elements_ordered(self) -> typing.Optional[builtins.bool]: ...
    @property
    def shared(self) -> typing.Optional[builtins.bool]: ...
    @property
    def key(self) -> typing.Optional[builtins.bool]: ...
    @property
    def identifier(self) -> typing.Optional[builtins.bool]: ...
    @property
    def designates_type(self) -> typing.Optional[builtins.bool]: ...
    @property
    def alias(self) -> typing.Optional[builtins.str]: ...
    @property
    def owner(self) -> typing.Optional[builtins.str]: ...
    @property
    def domain_of(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def subproperty_of(self) -> typing.Optional[builtins.str]: ...
    @property
    def symmetric(self) -> typing.Optional[builtins.bool]: ...
    @property
    def reflexive(self) -> typing.Optional[builtins.bool]: ...
    @property
    def locally_reflexive(self) -> typing.Optional[builtins.bool]: ...
    @property
    def irreflexive(self) -> typing.Optional[builtins.bool]: ...
    @property
    def asymmetric(self) -> typing.Optional[builtins.bool]: ...
    @property
    def transitive(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inverse(self) -> typing.Optional[builtins.str]: ...
    @property
    def is_class_field(self) -> typing.Optional[builtins.bool]: ...
    @property
    def transitive_form_of(self) -> typing.Optional[builtins.str]: ...
    @property
    def reflexive_transitive_form_of(self) -> typing.Optional[builtins.str]: ...
    @property
    def role(self) -> typing.Optional[builtins.str]: ...
    @property
    def is_usage_slot(self) -> typing.Optional[builtins.bool]: ...
    @property
    def usage_slot_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def relational_role(self) -> typing.Optional[typing.Literal['SUBJECT', 'OBJECT', 'PREDICATE', 'NODE', 'OTHERROLE']]: ...
    @property
    def slot_group(self) -> typing.Optional[builtins.str]: ...
    @property
    def is_grouping_slot(self) -> typing.Optional[builtins.bool]: ...
    @property
    def path_rule(self) -> typing.Optional[PathExpression]: ...
    @property
    def disjoint_with(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def children_are_mutually_disjoint(self) -> typing.Optional[builtins.bool]: ...
    @property
    def union_of(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def type_mappings(self) -> typing.Optional[builtins.dict[builtins.str, TypeMapping]]: ...
    @property
    def range(self) -> typing.Optional[builtins.str]: ...
    @property
    def range_expression(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def enum_range(self) -> typing.Optional[AnonymousEnumExpression | EnumDefinition]: ...
    @property
    def bindings(self) -> typing.Optional[builtins.list[EnumBinding]]: ...
    @property
    def required(self) -> typing.Optional[builtins.bool]: ...
    @property
    def recommended(self) -> typing.Optional[builtins.bool]: ...
    @property
    def multivalued(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined_as_list(self) -> typing.Optional[builtins.bool]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def value_presence(self) -> typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def equals_expression(self) -> typing.Optional[builtins.str]: ...
    @property
    def exact_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def maximum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def has_member(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def all_members(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def is_a(self) -> typing.Optional[builtins.str]: ...
    @property
    def abstract_(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixin(self) -> typing.Optional[builtins.bool]: ...
    @property
    def mixins(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def apply_to(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def values_from(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def string_serialization(self) -> typing.Optional[builtins.str]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @singular_name.setter
    def singular_name(self, value: typing.Optional[builtins.str]) -> None: ...
    @domain.setter
    def domain(self, value: typing.Optional[builtins.str]) -> None: ...
    @slot_uri.setter
    def slot_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @array.setter
    def array(self, value: typing.Optional[ArrayExpression]) -> None: ...
    @inherited.setter
    def inherited(self, value: typing.Optional[builtins.bool]) -> None: ...
    @readonly.setter
    def readonly(self, value: typing.Optional[builtins.str]) -> None: ...
    @ifabsent.setter
    def ifabsent(self, value: typing.Optional[builtins.str]) -> None: ...
    @list_elements_unique.setter
    def list_elements_unique(self, value: typing.Optional[builtins.bool]) -> None: ...
    @list_elements_ordered.setter
    def list_elements_ordered(self, value: typing.Optional[builtins.bool]) -> None: ...
    @shared.setter
    def shared(self, value: typing.Optional[builtins.bool]) -> None: ...
    @key.setter
    def key(self, value: typing.Optional[builtins.bool]) -> None: ...
    @identifier.setter
    def identifier(self, value: typing.Optional[builtins.bool]) -> None: ...
    @designates_type.setter
    def designates_type(self, value: typing.Optional[builtins.bool]) -> None: ...
    @alias.setter
    def alias(self, value: typing.Optional[builtins.str]) -> None: ...
    @owner.setter
    def owner(self, value: typing.Optional[builtins.str]) -> None: ...
    @domain_of.setter
    def domain_of(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @subproperty_of.setter
    def subproperty_of(self, value: typing.Optional[builtins.str]) -> None: ...
    @symmetric.setter
    def symmetric(self, value: typing.Optional[builtins.bool]) -> None: ...
    @reflexive.setter
    def reflexive(self, value: typing.Optional[builtins.bool]) -> None: ...
    @locally_reflexive.setter
    def locally_reflexive(self, value: typing.Optional[builtins.bool]) -> None: ...
    @irreflexive.setter
    def irreflexive(self, value: typing.Optional[builtins.bool]) -> None: ...
    @asymmetric.setter
    def asymmetric(self, value: typing.Optional[builtins.bool]) -> None: ...
    @transitive.setter
    def transitive(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inverse.setter
    def inverse(self, value: typing.Optional[builtins.str]) -> None: ...
    @is_class_field.setter
    def is_class_field(self, value: typing.Optional[builtins.bool]) -> None: ...
    @transitive_form_of.setter
    def transitive_form_of(self, value: typing.Optional[builtins.str]) -> None: ...
    @reflexive_transitive_form_of.setter
    def reflexive_transitive_form_of(self, value: typing.Optional[builtins.str]) -> None: ...
    @role.setter
    def role(self, value: typing.Optional[builtins.str]) -> None: ...
    @is_usage_slot.setter
    def is_usage_slot(self, value: typing.Optional[builtins.bool]) -> None: ...
    @usage_slot_name.setter
    def usage_slot_name(self, value: typing.Optional[builtins.str]) -> None: ...
    @relational_role.setter
    def relational_role(self, value: typing.Optional[typing.Literal['SUBJECT', 'OBJECT', 'PREDICATE', 'NODE', 'OTHERROLE']]) -> None: ...
    @slot_group.setter
    def slot_group(self, value: typing.Optional[builtins.str]) -> None: ...
    @is_grouping_slot.setter
    def is_grouping_slot(self, value: typing.Optional[builtins.bool]) -> None: ...
    @path_rule.setter
    def path_rule(self, value: typing.Optional[PathExpression]) -> None: ...
    @disjoint_with.setter
    def disjoint_with(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @children_are_mutually_disjoint.setter
    def children_are_mutually_disjoint(self, value: typing.Optional[builtins.bool]) -> None: ...
    @union_of.setter
    def union_of(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @type_mappings.setter
    def type_mappings(self, value: typing.Optional[builtins.dict[builtins.str, TypeMapping]]) -> None: ...
    @range.setter
    def range(self, value: typing.Optional[builtins.str]) -> None: ...
    @range_expression.setter
    def range_expression(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @enum_range.setter
    def enum_range(self, value: typing.Optional[AnonymousEnumExpression | EnumDefinition]) -> None: ...
    @bindings.setter
    def bindings(self, value: typing.Optional[builtins.list[EnumBinding]]) -> None: ...
    @required.setter
    def required(self, value: typing.Optional[builtins.bool]) -> None: ...
    @recommended.setter
    def recommended(self, value: typing.Optional[builtins.bool]) -> None: ...
    @multivalued.setter
    def multivalued(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined.setter
    def inlined(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined_as_list.setter
    def inlined_as_list(self, value: typing.Optional[builtins.bool]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @value_presence.setter
    def value_presence(self, value: typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @equals_expression.setter
    def equals_expression(self, value: typing.Optional[builtins.str]) -> None: ...
    @exact_cardinality.setter
    def exact_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_cardinality.setter
    def minimum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @maximum_cardinality.setter
    def maximum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @has_member.setter
    def has_member(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @all_members.setter
    def all_members(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @is_a.setter
    def is_a(self, value: typing.Optional[builtins.str]) -> None: ...
    @abstract_.setter
    def abstract_(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixin.setter
    def mixin(self, value: typing.Optional[builtins.bool]) -> None: ...
    @mixins.setter
    def mixins(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @apply_to.setter
    def apply_to(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @values_from.setter
    def values_from(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @string_serialization.setter
    def string_serialization(self, value: typing.Optional[builtins.str]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, singular_name:typing.Optional[builtins.str], domain:typing.Optional[builtins.str], slot_uri:typing.Optional[builtins.str], array:typing.Optional[ArrayExpression], inherited:typing.Optional[builtins.bool], readonly:typing.Optional[builtins.str], ifabsent:typing.Optional[builtins.str], list_elements_unique:typing.Optional[builtins.bool], list_elements_ordered:typing.Optional[builtins.bool], shared:typing.Optional[builtins.bool], key:typing.Optional[builtins.bool], identifier:typing.Optional[builtins.bool], designates_type:typing.Optional[builtins.bool], alias:typing.Optional[builtins.str], owner:typing.Optional[builtins.str], domain_of:typing.Optional[typing.Sequence[builtins.str]], subproperty_of:typing.Optional[builtins.str], symmetric:typing.Optional[builtins.bool], reflexive:typing.Optional[builtins.bool], locally_reflexive:typing.Optional[builtins.bool], irreflexive:typing.Optional[builtins.bool], asymmetric:typing.Optional[builtins.bool], transitive:typing.Optional[builtins.bool], inverse:typing.Optional[builtins.str], is_class_field:typing.Optional[builtins.bool], transitive_form_of:typing.Optional[builtins.str], reflexive_transitive_form_of:typing.Optional[builtins.str], role:typing.Optional[builtins.str], is_usage_slot:typing.Optional[builtins.bool], usage_slot_name:typing.Optional[builtins.str], relational_role:typing.Optional[typing.Literal['SUBJECT', 'OBJECT', 'PREDICATE', 'NODE', 'OTHERROLE']], slot_group:typing.Optional[builtins.str], is_grouping_slot:typing.Optional[builtins.bool], path_rule:typing.Optional[PathExpression], disjoint_with:typing.Optional[typing.Sequence[builtins.str]], children_are_mutually_disjoint:typing.Optional[builtins.bool], union_of:typing.Optional[typing.Sequence[builtins.str]], type_mappings:typing.Optional[typing.Mapping[builtins.str, TypeMapping]], range:typing.Optional[builtins.str], range_expression:typing.Optional[AnonymousClassExpression], enum_range:typing.Optional[AnonymousEnumExpression | EnumDefinition], bindings:typing.Optional[typing.Sequence[EnumBinding]], required:typing.Optional[builtins.bool], recommended:typing.Optional[builtins.bool], multivalued:typing.Optional[builtins.bool], inlined:typing.Optional[builtins.bool], inlined_as_list:typing.Optional[builtins.bool], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], value_presence:typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], equals_expression:typing.Optional[builtins.str], exact_cardinality:typing.Optional[builtins.int], minimum_cardinality:typing.Optional[builtins.int], maximum_cardinality:typing.Optional[builtins.int], has_member:typing.Optional[AnonymousSlotExpression], all_members:typing.Optional[AnonymousSlotExpression], none_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], any_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], all_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], is_a:typing.Optional[builtins.str], abstract_:typing.Optional[builtins.bool], mixin:typing.Optional[builtins.bool], mixins:typing.Optional[typing.Sequence[builtins.str]], apply_to:typing.Optional[typing.Sequence[builtins.str]], values_from:typing.Optional[typing.Sequence[builtins.str]], string_serialization:typing.Optional[builtins.str], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> SlotDefinition: ...

class SlotExpression:
    @property
    def range(self) -> typing.Optional[builtins.str]: ...
    @property
    def range_expression(self) -> typing.Optional[AnonymousClassExpression]: ...
    @property
    def enum_range(self) -> typing.Optional[AnonymousEnumExpression | EnumDefinition]: ...
    @property
    def bindings(self) -> typing.Optional[builtins.list[EnumBinding]]: ...
    @property
    def required(self) -> typing.Optional[builtins.bool]: ...
    @property
    def recommended(self) -> typing.Optional[builtins.bool]: ...
    @property
    def multivalued(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined(self) -> typing.Optional[builtins.bool]: ...
    @property
    def inlined_as_list(self) -> typing.Optional[builtins.bool]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def value_presence(self) -> typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def equals_expression(self) -> typing.Optional[builtins.str]: ...
    @property
    def exact_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def maximum_cardinality(self) -> typing.Optional[builtins.int]: ...
    @property
    def has_member(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def all_members(self) -> typing.Optional[AnonymousSlotExpression]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousSlotExpression]]: ...
    @range.setter
    def range(self, value: typing.Optional[builtins.str]) -> None: ...
    @range_expression.setter
    def range_expression(self, value: typing.Optional[AnonymousClassExpression]) -> None: ...
    @enum_range.setter
    def enum_range(self, value: typing.Optional[AnonymousEnumExpression | EnumDefinition]) -> None: ...
    @bindings.setter
    def bindings(self, value: typing.Optional[builtins.list[EnumBinding]]) -> None: ...
    @required.setter
    def required(self, value: typing.Optional[builtins.bool]) -> None: ...
    @recommended.setter
    def recommended(self, value: typing.Optional[builtins.bool]) -> None: ...
    @multivalued.setter
    def multivalued(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined.setter
    def inlined(self, value: typing.Optional[builtins.bool]) -> None: ...
    @inlined_as_list.setter
    def inlined_as_list(self, value: typing.Optional[builtins.bool]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @value_presence.setter
    def value_presence(self, value: typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @equals_expression.setter
    def equals_expression(self, value: typing.Optional[builtins.str]) -> None: ...
    @exact_cardinality.setter
    def exact_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_cardinality.setter
    def minimum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @maximum_cardinality.setter
    def maximum_cardinality(self, value: typing.Optional[builtins.int]) -> None: ...
    @has_member.setter
    def has_member(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @all_members.setter
    def all_members(self, value: typing.Optional[AnonymousSlotExpression]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousSlotExpression]]) -> None: ...
    def __new__(cls, range:typing.Optional[builtins.str], range_expression:typing.Optional[AnonymousClassExpression], enum_range:typing.Optional[AnonymousEnumExpression | EnumDefinition], bindings:typing.Optional[typing.Sequence[EnumBinding]], required:typing.Optional[builtins.bool], recommended:typing.Optional[builtins.bool], multivalued:typing.Optional[builtins.bool], inlined:typing.Optional[builtins.bool], inlined_as_list:typing.Optional[builtins.bool], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], value_presence:typing.Optional[typing.Literal['UNCOMMITTED', 'PRESENT', 'ABSENT']], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], equals_expression:typing.Optional[builtins.str], exact_cardinality:typing.Optional[builtins.int], minimum_cardinality:typing.Optional[builtins.int], maximum_cardinality:typing.Optional[builtins.int], has_member:typing.Optional[AnonymousSlotExpression], all_members:typing.Optional[AnonymousSlotExpression], none_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], any_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]], all_of:typing.Optional[typing.Sequence[AnonymousSlotExpression]]) -> SlotExpression: ...

class SlotView:
    @property
    def name(self) -> builtins.str: ...
    @property
    def definition(self) -> SlotDefinition: ...
    def range_class(self) -> typing.Optional[ClassView]: ...
    def range_enum(self) -> typing.Optional[EnumView]: ...
    def is_range_scalar(self) -> builtins.bool: ...
    def container_mode(self) -> builtins.str: ...
    def inline_mode(self) -> builtins.str: ...
    def __repr__(self) -> builtins.str: ...
    def __str__(self) -> builtins.str: ...

class StructuredAlias:
    @property
    def literal_form(self) -> builtins.str: ...
    @property
    def alias_predicate(self) -> typing.Optional[typing.Literal['EXACTSYNONYM', 'RELATEDSYNONYM', 'BROADSYNONYM', 'NARROWSYNONYM']]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def alias_contexts(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @literal_form.setter
    def literal_form(self, value: builtins.str) -> None: ...
    @alias_predicate.setter
    def alias_predicate(self, value: typing.Optional[typing.Literal['EXACTSYNONYM', 'RELATEDSYNONYM', 'BROADSYNONYM', 'NARROWSYNONYM']]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @alias_contexts.setter
    def alias_contexts(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, literal_form:builtins.str, alias_predicate:typing.Optional[typing.Literal['EXACTSYNONYM', 'RELATEDSYNONYM', 'BROADSYNONYM', 'NARROWSYNONYM']], categories:typing.Optional[typing.Sequence[builtins.str]], alias_contexts:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> StructuredAlias: ...

class SubsetDefinition:
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> SubsetDefinition: ...

class TypeDefinition:
    @property
    def typeof_(self) -> typing.Optional[builtins.str]: ...
    @property
    def base(self) -> typing.Optional[builtins.str]: ...
    @property
    def type_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def repr(self) -> typing.Optional[builtins.str]: ...
    @property
    def union_of(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def name(self) -> builtins.str: ...
    @property
    def id_prefixes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def id_prefixes_are_closed(self) -> typing.Optional[builtins.bool]: ...
    @property
    def definition_uri(self) -> typing.Optional[builtins.str]: ...
    @property
    def local_names(self) -> typing.Optional[builtins.dict[builtins.str, LocalName]]: ...
    @property
    def conforms_to(self) -> typing.Optional[builtins.str]: ...
    @property
    def implements(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def instantiates(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @typeof_.setter
    def typeof_(self, value: typing.Optional[builtins.str]) -> None: ...
    @base.setter
    def base(self, value: typing.Optional[builtins.str]) -> None: ...
    @type_uri.setter
    def type_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @repr.setter
    def repr(self, value: typing.Optional[builtins.str]) -> None: ...
    @union_of.setter
    def union_of(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @name.setter
    def name(self, value: builtins.str) -> None: ...
    @id_prefixes.setter
    def id_prefixes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @id_prefixes_are_closed.setter
    def id_prefixes_are_closed(self, value: typing.Optional[builtins.bool]) -> None: ...
    @definition_uri.setter
    def definition_uri(self, value: typing.Optional[builtins.str]) -> None: ...
    @local_names.setter
    def local_names(self, value: typing.Optional[builtins.dict[builtins.str, LocalName]]) -> None: ...
    @conforms_to.setter
    def conforms_to(self, value: typing.Optional[builtins.str]) -> None: ...
    @implements.setter
    def implements(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @instantiates.setter
    def instantiates(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, typeof_:typing.Optional[builtins.str], base:typing.Optional[builtins.str], type_uri:typing.Optional[builtins.str], repr:typing.Optional[builtins.str], union_of:typing.Optional[typing.Sequence[builtins.str]], pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], none_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], any_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], all_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], name:builtins.str, id_prefixes:typing.Optional[typing.Sequence[builtins.str]], id_prefixes_are_closed:typing.Optional[builtins.bool], definition_uri:typing.Optional[builtins.str], local_names:typing.Optional[typing.Mapping[builtins.str, LocalName]], conforms_to:typing.Optional[builtins.str], implements:typing.Optional[typing.Sequence[builtins.str]], instantiates:typing.Optional[typing.Sequence[builtins.str]], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> TypeDefinition: ...

class TypeExpression:
    @property
    def pattern(self) -> typing.Optional[builtins.str]: ...
    @property
    def structured_pattern(self) -> typing.Optional[PatternExpression]: ...
    @property
    def unit(self) -> typing.Optional[UnitOfMeasure]: ...
    @property
    def implicit_prefix(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string(self) -> typing.Optional[builtins.str]: ...
    @property
    def equals_string_in(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def equals_number(self) -> typing.Optional[builtins.int]: ...
    @property
    def minimum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def maximum_value(self) -> typing.Optional[typing.Any]: ...
    @property
    def none_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def exactly_one_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def any_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @property
    def all_of(self) -> typing.Optional[builtins.list[AnonymousTypeExpression]]: ...
    @pattern.setter
    def pattern(self, value: typing.Optional[builtins.str]) -> None: ...
    @structured_pattern.setter
    def structured_pattern(self, value: typing.Optional[PatternExpression]) -> None: ...
    @unit.setter
    def unit(self, value: typing.Optional[UnitOfMeasure]) -> None: ...
    @implicit_prefix.setter
    def implicit_prefix(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string.setter
    def equals_string(self, value: typing.Optional[builtins.str]) -> None: ...
    @equals_string_in.setter
    def equals_string_in(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @equals_number.setter
    def equals_number(self, value: typing.Optional[builtins.int]) -> None: ...
    @minimum_value.setter
    def minimum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @maximum_value.setter
    def maximum_value(self, value: typing.Optional[typing.Any]) -> None: ...
    @none_of.setter
    def none_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @exactly_one_of.setter
    def exactly_one_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @any_of.setter
    def any_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    @all_of.setter
    def all_of(self, value: typing.Optional[builtins.list[AnonymousTypeExpression]]) -> None: ...
    def __new__(cls, pattern:typing.Optional[builtins.str], structured_pattern:typing.Optional[PatternExpression], unit:typing.Optional[UnitOfMeasure], implicit_prefix:typing.Optional[builtins.str], equals_string:typing.Optional[builtins.str], equals_string_in:typing.Optional[typing.Sequence[builtins.str]], equals_number:typing.Optional[builtins.int], minimum_value:typing.Optional[typing.Any], maximum_value:typing.Optional[typing.Any], none_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], exactly_one_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], any_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]], all_of:typing.Optional[typing.Sequence[AnonymousTypeExpression]]) -> TypeExpression: ...

class TypeMapping:
    @property
    def framework_key(self) -> builtins.str: ...
    @property
    def mapped_type(self) -> typing.Optional[builtins.str]: ...
    @property
    def string_serialization(self) -> typing.Optional[builtins.str]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @framework_key.setter
    def framework_key(self, value: builtins.str) -> None: ...
    @mapped_type.setter
    def mapped_type(self, value: typing.Optional[builtins.str]) -> None: ...
    @string_serialization.setter
    def string_serialization(self, value: typing.Optional[builtins.str]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, framework_key:builtins.str, mapped_type:typing.Optional[builtins.str], string_serialization:typing.Optional[builtins.str], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> TypeMapping: ...

class UniqueKey:
    @property
    def unique_key_name(self) -> builtins.str: ...
    @property
    def unique_key_slots(self) -> builtins.list[builtins.str]: ...
    @property
    def consider_nulls_inequal(self) -> typing.Optional[builtins.bool]: ...
    @property
    def extensions(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def annotations(self) -> typing.Optional[builtins.dict[builtins.str, Annotation]]: ...
    @property
    def description(self) -> typing.Optional[builtins.str]: ...
    @property
    def alt_descriptions(self) -> typing.Optional[builtins.dict[builtins.str, AltDescription]]: ...
    @property
    def title(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated(self) -> typing.Optional[builtins.str]: ...
    @property
    def todos(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def notes(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def comments(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def examples(self) -> typing.Optional[builtins.list[Example]]: ...
    @property
    def in_subset(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def from_schema(self) -> typing.Optional[builtins.str]: ...
    @property
    def imported_from(self) -> typing.Optional[builtins.str]: ...
    @property
    def source(self) -> typing.Optional[builtins.str]: ...
    @property
    def in_language(self) -> typing.Optional[builtins.str]: ...
    @property
    def see_also(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def deprecated_element_has_exact_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def deprecated_element_has_possible_replacement(self) -> typing.Optional[builtins.str]: ...
    @property
    def aliases(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def structured_aliases(self) -> typing.Optional[builtins.list[StructuredAlias]]: ...
    @property
    def mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def close_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def related_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def narrow_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def broad_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def contributors(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def created_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def last_updated_on(self) -> typing.Optional[datetime.datetime]: ...
    @property
    def modified_by(self) -> typing.Optional[builtins.str]: ...
    @property
    def status(self) -> typing.Optional[builtins.str]: ...
    @property
    def rank(self) -> typing.Optional[builtins.int]: ...
    @property
    def categories(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def keywords(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @unique_key_name.setter
    def unique_key_name(self, value: builtins.str) -> None: ...
    @unique_key_slots.setter
    def unique_key_slots(self, value: builtins.list[builtins.str]) -> None: ...
    @consider_nulls_inequal.setter
    def consider_nulls_inequal(self, value: typing.Optional[builtins.bool]) -> None: ...
    @extensions.setter
    def extensions(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @annotations.setter
    def annotations(self, value: typing.Optional[builtins.dict[builtins.str, Annotation]]) -> None: ...
    @description.setter
    def description(self, value: typing.Optional[builtins.str]) -> None: ...
    @alt_descriptions.setter
    def alt_descriptions(self, value: typing.Optional[builtins.dict[builtins.str, AltDescription]]) -> None: ...
    @title.setter
    def title(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated.setter
    def deprecated(self, value: typing.Optional[builtins.str]) -> None: ...
    @todos.setter
    def todos(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @notes.setter
    def notes(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @comments.setter
    def comments(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @examples.setter
    def examples(self, value: typing.Optional[builtins.list[Example]]) -> None: ...
    @in_subset.setter
    def in_subset(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @from_schema.setter
    def from_schema(self, value: typing.Optional[builtins.str]) -> None: ...
    @imported_from.setter
    def imported_from(self, value: typing.Optional[builtins.str]) -> None: ...
    @source.setter
    def source(self, value: typing.Optional[builtins.str]) -> None: ...
    @in_language.setter
    def in_language(self, value: typing.Optional[builtins.str]) -> None: ...
    @see_also.setter
    def see_also(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @deprecated_element_has_exact_replacement.setter
    def deprecated_element_has_exact_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @deprecated_element_has_possible_replacement.setter
    def deprecated_element_has_possible_replacement(self, value: typing.Optional[builtins.str]) -> None: ...
    @aliases.setter
    def aliases(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @structured_aliases.setter
    def structured_aliases(self, value: typing.Optional[builtins.list[StructuredAlias]]) -> None: ...
    @mappings.setter
    def mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @close_mappings.setter
    def close_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @related_mappings.setter
    def related_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @narrow_mappings.setter
    def narrow_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @broad_mappings.setter
    def broad_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_by.setter
    def created_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @contributors.setter
    def contributors(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @created_on.setter
    def created_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @last_updated_on.setter
    def last_updated_on(self, value: typing.Optional[datetime.datetime]) -> None: ...
    @modified_by.setter
    def modified_by(self, value: typing.Optional[builtins.str]) -> None: ...
    @status.setter
    def status(self, value: typing.Optional[builtins.str]) -> None: ...
    @rank.setter
    def rank(self, value: typing.Optional[builtins.int]) -> None: ...
    @categories.setter
    def categories(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @keywords.setter
    def keywords(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    def __new__(cls, unique_key_name:builtins.str, unique_key_slots:typing.Sequence[builtins.str], consider_nulls_inequal:typing.Optional[builtins.bool], extensions:typing.Optional[typing.Mapping[builtins.str, Annotation]], annotations:typing.Optional[typing.Mapping[builtins.str, Annotation]], description:typing.Optional[builtins.str], alt_descriptions:typing.Optional[typing.Mapping[builtins.str, AltDescription]], title:typing.Optional[builtins.str], deprecated:typing.Optional[builtins.str], todos:typing.Optional[typing.Sequence[builtins.str]], notes:typing.Optional[typing.Sequence[builtins.str]], comments:typing.Optional[typing.Sequence[builtins.str]], examples:typing.Optional[typing.Sequence[Example]], in_subset:typing.Optional[typing.Sequence[builtins.str]], from_schema:typing.Optional[builtins.str], imported_from:typing.Optional[builtins.str], source:typing.Optional[builtins.str], in_language:typing.Optional[builtins.str], see_also:typing.Optional[typing.Sequence[builtins.str]], deprecated_element_has_exact_replacement:typing.Optional[builtins.str], deprecated_element_has_possible_replacement:typing.Optional[builtins.str], aliases:typing.Optional[typing.Sequence[builtins.str]], structured_aliases:typing.Optional[typing.Sequence[StructuredAlias]], mappings:typing.Optional[typing.Sequence[builtins.str]], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], close_mappings:typing.Optional[typing.Sequence[builtins.str]], related_mappings:typing.Optional[typing.Sequence[builtins.str]], narrow_mappings:typing.Optional[typing.Sequence[builtins.str]], broad_mappings:typing.Optional[typing.Sequence[builtins.str]], created_by:typing.Optional[builtins.str], contributors:typing.Optional[typing.Sequence[builtins.str]], created_on:typing.Optional[datetime.datetime], last_updated_on:typing.Optional[datetime.datetime], modified_by:typing.Optional[builtins.str], status:typing.Optional[builtins.str], rank:typing.Optional[builtins.int], categories:typing.Optional[typing.Sequence[builtins.str]], keywords:typing.Optional[typing.Sequence[builtins.str]]) -> UniqueKey: ...

class UnitOfMeasure:
    @property
    def symbol(self) -> typing.Optional[builtins.str]: ...
    @property
    def abbreviation(self) -> typing.Optional[builtins.str]: ...
    @property
    def descriptive_name(self) -> typing.Optional[builtins.str]: ...
    @property
    def exact_mappings(self) -> typing.Optional[builtins.list[builtins.str]]: ...
    @property
    def ucum_code(self) -> typing.Optional[builtins.str]: ...
    @property
    def derivation(self) -> typing.Optional[builtins.str]: ...
    @property
    def has_quantity_kind(self) -> typing.Optional[builtins.str]: ...
    @property
    def iec61360code(self) -> typing.Optional[builtins.str]: ...
    @symbol.setter
    def symbol(self, value: typing.Optional[builtins.str]) -> None: ...
    @abbreviation.setter
    def abbreviation(self, value: typing.Optional[builtins.str]) -> None: ...
    @descriptive_name.setter
    def descriptive_name(self, value: typing.Optional[builtins.str]) -> None: ...
    @exact_mappings.setter
    def exact_mappings(self, value: typing.Optional[builtins.list[builtins.str]]) -> None: ...
    @ucum_code.setter
    def ucum_code(self, value: typing.Optional[builtins.str]) -> None: ...
    @derivation.setter
    def derivation(self, value: typing.Optional[builtins.str]) -> None: ...
    @has_quantity_kind.setter
    def has_quantity_kind(self, value: typing.Optional[builtins.str]) -> None: ...
    @iec61360code.setter
    def iec61360code(self, value: typing.Optional[builtins.str]) -> None: ...
    def __new__(cls, symbol:typing.Optional[builtins.str], abbreviation:typing.Optional[builtins.str], descriptive_name:typing.Optional[builtins.str], exact_mappings:typing.Optional[typing.Sequence[builtins.str]], ucum_code:typing.Optional[builtins.str], derivation:typing.Optional[builtins.str], has_quantity_kind:typing.Optional[builtins.str], iec61360code:typing.Optional[builtins.str]) -> UnitOfMeasure: ...

def diff(source:LinkMLInstance, target:LinkMLInstance, treat_missing_as_null:typing.Optional[builtins.bool]=None) -> typing.Any: ...

def load_json(source:typing.Any, sv:SchemaView, class:typing.Optional[ClassView]) -> LinkMLInstance: ...

def load_yaml(source:typing.Any, sv:SchemaView, class:typing.Optional[ClassView]) -> LinkMLInstance: ...

def make_schema_view(source:typing.Optional[typing.Any]=None) -> SchemaView: ...

def patch(source:LinkMLInstance, deltas:typing.Any, treat_missing_as_null:builtins.bool=True, ignore_no_ops:builtins.bool=True) -> PatchResult: ...

def sum_as_string(a:builtins.int, b:builtins.int) -> builtins.str: ...

def to_turtle(value:LinkMLInstance, skolem:typing.Optional[builtins.bool]=None) -> builtins.str: ...

